apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.Version }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable | default "25%" }}
      maxSurge: {{ .Values.rollingUpdate.maxSurge | default "25%" }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
        {{- if .Values.podSecurityContext }}
        {{ toYaml .Values.podSecurityContext | nindent 8 }}
        {{- end }}
      {{- with .Values.initContainers }}
      initContainers:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Release.Name }}-container
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
            {{- if .Values.securityContext }}
            {{ toYaml .Values.securityContext | nindent 12 }}
            {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          args:
            - "serve"
            - "--config"
            - "/app/config/config.yaml"
          ports:
            - name: web-port
              containerPort: {{ .Values.containerPorts.web | default 8080 }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path | default "/health/ready" }}
              port: {{ .Values.probes.readiness.port | default 8080 }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds | default 10 }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds | default 10 }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold | default 3 }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path | default "/health/live" }}
              port: {{ .Values.probes.liveness.port | default 8080 }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds | default 10 }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold | default 5 }}
          volumeMounts:
            - name: config-volume
              mountPath: /app/config/config.yaml
              subPath: config.yaml
              readOnly: true
            - name: logs-volume
              mountPath: /app/logs
            {{- with .Values.extraVolumeMounts }}
            {{ toYaml . | nindent 12 }}
            {{- end }}
          resources:
            {{ toYaml .Values.resources | nindent 12 }}
          env:
            - name: PROVIDERS_CASDOOR_CLIENTSECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: casdoor-client-secret
            - name: SYNCSTAR_PERSONALTOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: sync-star-personal-token
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: database-password
            - name: ENCRYPT_AESKEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: aes-key
            - name: SMS_CLIENTSECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: sms-sercret
          {{- if not (empty .Values.env) }}
          env:
            {{ toYaml .Values.env | nindent 12 }}
          {{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ .Release.Name }}-config
        - name: logs-volume
          emptyDir: {}
        {{- with .Values.secretMounts }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{ toYaml . | nindent 8 }}
      {{- end }}